package main

import (
	"crypto/ecdsa"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"strconv"
	"strings"

	"github.com/dynm/RareGemGPUMiner/wallet"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/crypto"
)

const (
	RELAY = "https://relay.flashbots.net"
)

// https://docs.flashbots.net/flashbots-auction/searchers/advanced/rpc-endpoint/
func GetAuthData(addr common.Address, pk *ecdsa.PrivateKey, body string) (signatureHex string, err error) {
	// body := `{"jsonrpc":"2.0","method":"eth_sendBundle","params":[{see above}],"id":1}`
	hashedBody := crypto.Keccak256Hash([]byte(body)).Hex()
	sig, err := crypto.Sign(crypto.Keccak256([]byte("\x19Ethereum Signed Message:\n"+strconv.Itoa(len(hashedBody))+hashedBody)), pk)
	signatureHex = addr.Hex() + ":" + hexutil.Encode(sig)
	return
}

type SendBundleArgs struct {
	Txs               []string  `json:"txs"`
	BlockNumber       string    `json:"blockNumber"`
	MinTimestamp      *uint64   `json:"minTimestamp,omitempty"`
	MaxTimestamp      *uint64   `json:"maxTimestamp,omitempty"`
	RevertingTxHashes *[]string `json:"revertingTxHashes,omitempty"`
}

type CallBundleArgs struct {
	Txs                    []string `json:"txs"`
	BlockNumber            string   `json:"blockNumber"`
	StateBlockNumberOrHash string   `json:"stateBlockNumber"`
	Timestamp              uint64   `json:"timestamp"`
}

func GenBody(method, params string) string {
	return fmt.Sprintf(`{"jsonrpc":"2.0","method":"%s","params":[%s],"id":1}`, method, params)
}

func DoPost(bodyStr, signature string) error {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	// curl -X POST -H "Content-Type: application/json" -H "X-Flashbots-Signature: 0x1234:0xabcd" --data '{"jsonrpc":"2.0","method":"eth_sendBundle","params":[{see above}],"id":1}' https://relay.flashbots.net
	body := strings.NewReader(bodyStr)
	req, err := http.NewRequest("POST", RELAY, body)
	if err != nil {
		// handle err
		return err
	}
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("X-Flashbots-Signature", signature)

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		// handle err
		return err
	}
	ret := make([]byte, 4096)
	n, err := resp.Body.Read(ret)
	if err != nil {
		return err
	}
	log.Printf("resp: %s", string(ret[:n]))
	defer resp.Body.Close()
	return nil
}

func SendFlashBotsTransaction(auth *bind.TransactOpts, pk *ecdsa.PrivateKey, tx *types.Transaction, expectBlockNumber uint64, padding bool) {
	var bundleHex []string
	txBin, err := tx.MarshalBinary()
	if err != nil {
		log.Panic(err)
	}
	bundleHex = append(bundleHex, fmt.Sprintf("0x%02x", txBin))

	if padding {
		nonce := tx.Nonce()
		feeCap := tx.GasFeeCap()
		tipCap := tx.GasTipCap()
		paddingTx, err := wallet.SignEIP1559Tx(nonce+1, auth, auth.From, nil, nil, 21_000, feeCap, tipCap)
		if err != nil {
			log.Panic(err)
		}
		tx2Bin, err := paddingTx.MarshalBinary()
		if err != nil {
			log.Panic(err)
		}
		bundleHex = append(bundleHex, fmt.Sprintf("0x%02x", tx2Bin))
	}

	sendBundle := &SendBundleArgs{
		Txs:         bundleHex,
		BlockNumber: fmt.Sprintf("0x%02x", expectBlockNumber),
	}

	payloadStr, err := json.Marshal(sendBundle)
	if err != nil {
		log.Panic(err)
	}
	log.Print(string(payloadStr))
	body := GenBody("eth_sendBundle", string(payloadStr))
	log.Printf("body: %s", body)
	keyAddr := crypto.PubkeyToAddress(pk.PublicKey)
	authData, err := GetAuthData(keyAddr, pk, body)
	if err != nil {
		log.Panic(err)
	}

	err = DoPost(body, authData)
	if err != nil {
		log.Panic(err)
	}
}
